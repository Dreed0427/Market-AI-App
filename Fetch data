import os, time, requests, psycopg2
from datetime import datetime

PG = dict(
    host=os.getenv("PGHOST"),
    user=os.getenv("PGUSER"),
    password=os.getenv("PGPASSWORD"),
    dbname=os.getenv("PGDATABASE"),
    port=os.getenv("PGPORT", "5432")
)

def conn():
    return psycopg2.connect(**PG, connect_timeout=10)

def upsert(symbol, ts, o,h,l,c,v):
    with conn() as cn, cn.cursor() as cur:
        cur.execute("""
        INSERT INTO market_bars(symbol, ts, open, high, low, close, volume)
        VALUES (%s,%s,%s,%s,%s,%s,%s)
        ON CONFLICT DO NOTHING;
        """, (symbol, ts, o,h,l,c,v))
        cn.commit()

def pull_coingecko(symbol):
    ids = {"BTC":"bitcoin","ETH":"ethereum"}
    if symbol not in ids: return
    url = f"https://api.coingecko.com/api/v3/coins/{ids[symbol]}/market_chart"
    r = requests.get(url, params={"vs_currency":"usd","days":"1"})
    r.raise_for_status()
    for t, price in r.json().get("prices", []):
        ts = datetime.utcfromtimestamp(t/1000.0)
        upsert(symbol, ts, price, price, price, price, 0)

def pull_finnhub_spy():
    key = os.getenv("FINNHUB_KEY")
    if not key: return
    r = requests.get("https://finnhub.io/api/v1/quote",
                     params={"symbol":"SPY","token":key}, timeout=10)
    if r.ok:
        j = r.json()
        ts = datetime.utcfromtimestamp(j.get("t", int(time.time())))
        c = float(j.get("c", 0))
        upsert("SPY", ts, c,c,c,c, 0)

if __name__ == "__main__":
    # create table if it doesn't exist
    with conn() as cn, cn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS market_bars (
          id SERIAL PRIMARY KEY,
          symbol TEXT,
          ts TIMESTAMP,
          open NUMERIC,
          high NUMERIC,
          low NUMERIC,
          close NUMERIC,
          volume NUMERIC
        );
        """); cn.commit()
    pull_coingecko("BTC")
    pull_coingecko("ETH")
    pull_finnhub_spy()
